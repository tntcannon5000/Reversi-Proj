#BlueJ class context
comment0.target=src.src.GameLogic
comment0.text=\r\n\ The\ src.src.GameLogic\ class\ is\ responsible\ for\ managing\ the\ game's\ logic\ such\ as\ checking\ for\ legal\ moves,\r\n\ \r\n\ @author\ Niranjan\r\n\ @version\ 9.9999999x10^9999999\r\n
comment1.params=reversi
comment1.target=src.src.GameLogic(src.src.Reversi)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ src.src.GameLogic\r\n
comment10.params=butt\ list\ legal
comment10.target=void\ checkUpRight(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment10.text=\r\n\ Checks\ in\ a\ straight\ line\ diagonally\ up\ right\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment11.params=butt\ list\ legal
comment11.target=void\ checkDownLeft(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment11.text=\r\n\ Checks\ in\ a\ straight\ line\ diagonally\ down\ left\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment12.params=butt\ list\ legal
comment12.target=void\ checkDownRight(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment12.text=\r\n\ Checks\ in\ a\ straight\ line\ diagonally\ down\ right\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment2.params=
comment2.target=void\ sortEnemy()
comment2.text=\r\n\ Method\ to\ set\ which\ colour\ is\ the\ enemy\ for\ that\ turn,\ before\ determining\ legal\ moves\r\n
comment3.params=
comment3.target=int\ markLegalMoves()
comment3.text=\r\n\ Method\ which\ marks\ all\ potential\ legal\ moves\ for\ the\ person\ who's\ turn\ it\ is.\r\n
comment4.params=butt
comment4.target=void\ checkSurroundings(src.src.GameButton)
comment4.text=\r\n\ Method\ which\ checks\ the\ 8\ surrounding\ buttons\ of\ the\ button\ in\ question\ to\ check\ if\ the\ button\ in\ question\ is\ a\ legal\ move.\r\n
comment5.params=butt\ list\ legal
comment5.target=void\ checkUp(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment5.text=\r\n\ Checks\ in\ a\ straight\ line\ up\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment6.params=butt\ list\ legal
comment6.target=void\ checkDown(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment6.text=\r\n\ Checks\ in\ a\ straight\ line\ down\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment7.params=butt\ list\ legal
comment7.target=void\ checkLeft(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment7.text=\r\n\ Checks\ in\ a\ straight\ line\ Left\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment8.params=butt\ list\ legal
comment8.target=void\ checkRight(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment8.text=\r\n\ Checks\ in\ a\ straight\ line\ right\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
comment9.params=butt\ list\ legal
comment9.target=void\ checkUpLeft(src.src.GameButton,\ java.util.ArrayList,\ src.src.LegalMove)
comment9.text=\r\n\ Checks\ in\ a\ straight\ line\ diagonally\ up\ left\ until\ it\ meets\ either\ the\ edge\ of\ the\ table,\ a\ blank,\ a\ legalmove\ (so\ a\ blank),\ or\ an\ enemy\ button.\r\n\ If\ there\ has\ been\ at\ least\ one\ enemy\ button\ in\ between\ itself\ and\ the\ friendly\ one,\ with\ no\ gaps,\ it\ marks\ the\ button\ in\ question\r\n\ as\ a\ legal\ move.\r\n
numComments=13
